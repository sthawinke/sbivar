% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitGPs.R
\name{fitGPs}
\alias{fitGPs}
\title{Fit a gaussian process to a single outcome vector}
\usage{
fitGPs(x, coord, GPmethod, device, training_iter, corStruct, optControl)
}
\arguments{
\item{x}{outcome vector}

\item{coord}{Coordinate matrix}

\item{GPmethod}{The method by which to fit the Gaussian processes,
passed onto \link[nlme]{gls} as "method" if it equals "REML" or "ML".}

\item{device}{Device to fit the GPs on. Defaults to "cpu",
can use "gpu" via the python package gpytorch if installed}

\item{training_iter}{Number of training iterations in gpytorch}

\item{corStruct}{The correlation object, see \link[nlme]{corStruct}.
At this point, only \link[nlme]{corGaus} is accepted}

\item{optControl}{List of control values, see \link[nlme]{glsControl}}
}
\value{
A vector of length 4 with components range, nugget, sigma and mean
}
\description{
Fit a gaussian process to a single outcome vector
}
\details{
Providing "cuda" as device exploits the available GPU for speedup,
especially for large GPs (thousands of observations). Setting GPmethod to
 "ML" or "REML" leads to model fitting in R using the \link[nlme]{gls} function.
Setting GPmethod to "gpytorch" uses the eponymous python package, with the option of gpu accceleration.
The parametrization of the GPs is the one common in geostatistics, as described in \link[nlme]{gls}.
}
